"use strict";var signals=[];var debug=false;var debug1=true;var program;function createSignal(sig,val){var oneSignal={name:sig,value:val,action:undefined};signals.push(oneSignal)}exports.createSignal=createSignal;function addEventListener(sig,action){for(var i=0;i<signals.length;i++){if(signals[i].name===sig){signals[i].action=action;return true}}console.log("ERR: addEventListener: signal inconnu:",sig);return-1}exports.addEventListener=addEventListener;function playEventListener(sig,val){for(var i=0;i<signals.length;i++){if(signals[i].name===sig){if(signals[i].action!==undefined){signals[i].action(val);return true}else{return true}}}console.log("ERR: playEventListener: signal inconnu:",sig,val);return-1}exports.playEventListener=playEventListener;function setSignalValue(val){for(var i=0;i<signals.length;i++){if(signals[i].name===sig){signals[i].value=val;return true}}console.log("ERR: setSignalValue: signal inconnu:",sig);return-1}exports.setSignalValue=setSignalValue;function isSignalActivatedInInstruction(instr,signal){if(instr.signal===signal){if(instr.signalActivated)return true}return false}function activateSignal(sig,val){if(debug)console.log("activateSignal",sig,val);setSignalAll(program,sig,val,true);return true}exports.activateSignal=activateSignal;function setSignal(instr,sig,value,activated){if(instr===undefined)return;for(var i=0;i<instr.length;i++){if(instr[i].signal===sig){instr[i].signalActivated=activated;instr[i].signalValue=value}if(debug)console.log("-- setSignal",instr[i].name,instr[i].signal,instr[i].signalActivated);setSignal(instr[i].nextInstr,sig,value,activated)}}function setSignalAll(prog,sig,value,activated){if(debug)console.log("- setSignalAll");setSignal(prog.instructions,sig,value,activated)}exports.printProgram=printProgram;var instrIndex=0;function createInstruction(name,signal,signalValue,count,action,nextInstr){var instruction={name:name,signal:signal,signalActivated:false,signalValue:signalValue,count:0,countMax:count,action:action,burnt:false,broadcast:false,nextInstr:nextInstr,index:instrIndex};instrIndex++;return instruction}exports.createInstruction=createInstruction;function execInstruction(command,branch){if(debug)console.log("execInstruction: Instruction :",command.name,command.signal);if(!command.burnt){switch(command.name){case"abort":if(debug)console.log("abort: signal",command.signal,", abort burnt:",command.burnt,", abort index:",command.index);if(isSignalActivatedInInstruction(command,command.signal)){command.count++;if(command.count>=command.countMax){command.count=0;command.burnt=true;if(debug)console.log("abort brulé car signal actif:",command);return true}else{for(var i=0;i<command.nextInstr.length;i++){if(!runBranch(command.nextInstr[i],command.nextInstr)){command.burnt=false;return false}if(i===command.nextInstr.length-1){command.count=0;command.burnt=true;return true}}}}else{for(var i=0;i<command.nextInstr.length;i++){if(!runBranch(command.nextInstr[i],branch)){command.burnt=false;return false}if(i===command.nextInstr.length-1){command.count=0;command.burnt=true;return true}}}break;case"atom":if(debug)console.log("atom");command.action();command.burnt=true;return true;case"await":if(isSignalActivatedInInstruction(command,command.signal)){command.count++;if(command.count>=command.countMax){command.count=0;command.signalActivated=false;if(debug)console.log("await dans la branche:",branch);setSignal(branch,command.signal,command.signalValue,false);command.burnt=true;return true}}else{command.burnt=false;return false}break;case"await_do":if(debug)console.log("await_do: ",command.signal,signals);if(isSignalActivatedInInstruction(command,command.signal)){command.count++;if(command.count>=command.countMax){command.action();command.count=0;command.signalActivated=false;setSignal(branch,command.signal,command.signalValue,false);command.burnt=true;return true}}else{command.burnt=false;return false}case"emit":if(debug)console.log("-- emit --");activateSignal(command.signal,command.signalValue);playEventListener(command.signal,command.signalValue);if(debug)console.log("-- emit activé : ",command.signal,command.burnt);command.burnt=true;return true;case"every":if(isSignalActivatedInInstruction(command,command.signal)){command.count++;if(command.count>=command.countMax){command.count=0;if(debug)console.log("every: command.branch",i,command.nextInstr[0]);setSignal(branch,command.signal,command.signalValue,false);unburnBranch(command.nextInstr);for(var i=0;i<command.nextInstr.length;i++){if(debug)console.log("every: seq command.branch",i,command.nextInstr[i].name);if(!runBranch(command.nextInstr[i],command.nextInstr)){return false}if(i===command.nextInstr.length-1){command.burnt=false;return false}}}else{command.burnt=false;return false}}else{command.burnt=false;return false}case"loop":if(debug)console.log("loop command.branch",command.nextInstr);for(var i=0;i<command.nextInstr.length;i++){if(debug)console.log("seq command.branch",i,command.nextInstr[i]);if(!runBranch(command.nextInstr[i],command.nextInstr)){return false}if(i===command.nextInstr.length-1){unburnBranch(command.nextInstr);command.burnt=false;return false}}break;case"par":var countBranch=0;for(var i=0;i<command.nextInstr.length;i++){if(runBranch(command.nextInstr[i],command.nextInstr)){if(debug)console.log("Par:",i);countBranch++}}if(countBranch===command.nextInstr.length){command.burnt=true;return true}else{return false}break;case"restart":if(debug1)console.log("restart:");command.burnt=true;reRunProg();return true;case"run":case"seq":if(debug)console.log("seq command.branch",command.nextInstr);for(var i=0;i<command.nextInstr.length;i++){if(debug)console.log("seq command.branch",i,command.nextInstr[i]);if(!runBranch(command.nextInstr[i],command.nextInstr)){return false}if(i===command.nextInstr.length-1){command.burnt=true;return true}}break;case"printSignals":if(debug)console.log("printSignals");command.action();command.burnt=true;return true;default:console.log("Instruction inconnue")}}else{if(debug)console.log("execInstruction: Instruction :",command.name,"déjà jouée");return true}}function runProg(){if(debug)console.log("\nrunProg",prog.length);runBranch(program.instructions,undefined)}exports.runProg=runProg;function reRunProg(){if(debug)console.log("\nreRunProg",program);if(program!==undefined){runBranch(program.instructions,undefined)}}function createModule(instr){var module={name:"Program",signal:undefined,signalActivated:undefined,burnt:false,instructions:instr};program=module;return module}exports.createModule=createModule;function runBranch(instructions,branch){if(debug)console.log("\nrunBranch: length: ",instructions.length);if(instructions.length===undefined){if(debug)console.log("runBranch: instruction seule:",instructions.name);if(!execInstruction(instructions,branch)){return false}return true}for(var i=0;i<instructions.length;i++){if(debug)console.log("-- runBranch: tableau d'instructions:",i,instructions[i].name,instructions[i].index);if(!execInstruction(instructions[i],instructions)){return false}}return true}function unburnBranch(instructions){if(instructions===undefined){return true}if(instructions.length===undefined){if(debug)console.log("unburnBranch 1:",instructions);instructions.burnt=false;return true}for(var i=0;i<instructions.length;i++){if(debug)console.log("\n--- unburnBranch",i,instructions[i].name);if(instructions[i].burnt!==undefined){if(debug)console.log("unburnBranch 2:",instructions[i].name);instructions[i].burnt=false;unburnBranch(instructions[i].nextInstr)}else{unburnBranch(instructions[i].nextInstr)}}return true}function printInstructions(instr,option){if(instr===undefined)return;for(var i=0;i<instr.length;i++){if(option===true){console.log(instr[i]);console.log("------------------------------")}else{console.log("-> ",instr[i].name,": index:",instr[i].index)}printInstructions(instr[i].nextInstr,option)}}function printProgram(prog,option){console.log("------ PROGRAM ---------------");printInstructions(prog.instructions,option);console.log("------------------------------")}exports.printProgram=printProgram;function _emit(signal,value){return createInstruction("emit",signal,value,undefined,undefined,undefined)}exports._emit=_emit;function _await(signal,count){return createInstruction("await",signal,undefined,count,undefined,undefined)}exports._await=_await;function _await_do(signal,count,action){return createInstruction("await_do",signal,undefined,count,action,undefined)}exports._await_do=_await_do;function _abort(signal,count,instructions){return createInstruction("abort",signal,undefined,count,undefined,instructions)}exports._abort=_abort;function _every(signal,count,instructions){return createInstruction("every",signal,undefined,count,undefined,instructions)}exports._every=_every;function _seq(instructions){return createInstruction("seq",undefined,undefined,undefined,undefined,instructions)}exports._seq=_seq;function _par(instructions){return createInstruction("par",undefined,undefined,undefined,undefined,instructions)}exports._par=_par;function _loop(instructions){return createInstruction("loop",undefined,undefined,undefined,undefined,instructions)}exports._loop=_loop;function _run(module){return createInstruction("run",undefined,undefined,undefined,undefined,module)}exports._run=_run;function _atom(action){return createInstruction("atom",undefined,undefined,undefined,action,undefined)}exports._atom=_atom;function _printSignals(){return createInstruction("printSignals",undefined,undefined,undefined,()=>{console.log(signals)},undefined)}exports._printSignals=_printSignals;function _restart(){return createInstruction("restart",undefined,undefined,undefined,undefined,undefined)}exports._restart=_restart;