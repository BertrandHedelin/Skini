/**
 * @fileOverview For the creation of the parameters of the Skini piece
 * @author Bertrand Hédelin© Copyright 2017-2022, B. Petit-Hédelin
 * @version 1.1
 */
 'use strict'

 var fs = require("fs");

const bleu = "#008CBA";
const rouge = '#CF1919';
const vert = "#4CAF50";
const marron = '#666633';
const violet = '#797bbf';
const orange = '#b3712d';
const rose = '#E0095F';
const gris = '#5F6262';
const ocre = '#BCA104';
const terre = '#A76611';
const grisvert = '#039879';
const grisbleu = '#315A93';

var groupesDesSons = [
  // Pour group: nom du groupe (0), index du groupe (1), type (2), x(3), y(4), nbe d'éléments(5), color(6), prédécesseurs(7), n° de scène graphique
  ["groupe0", 0, "group", 170, 100, 20, rouge, [], 1],  //0 index d'objet graphique
  ["groupe1", 1, "group", 20, 240, 20, bleu, [], 1],     //1
  ["groupe2", 2, "group", 170, 580, 20, vert, [], 1],  //2
  ["groupe3", 3, "group", 350, 100, 20, gris, [], 1],   //3
  ["groupe4", 4, "group", 20, 380, 20, violet, [], 1], //4
  ["groupe5", 5, "group", 350, 580, 20, bleu, [], 1],  //5
  ["groupe6", 6, "group", 540, 100, 20, rose, [], 1],   //6
  ["groupe7", 7, "group", 740, 480, 20, terre, [], 1],
  ["groupe8", 8, "group", 540, 580, 20, orange, [], 1],
  ["groupe9", 9, "group", 740, 200, 20, marron, [], 1],
  ["groupe10", 10, "group", 760, 340, 20, grisvert, [], 1],
  ["groupe11", 11, "group", 170, 340, 20, grisbleu, [], 1],
  ["groupe12", 12, "group", 350, 340, 20, ocre, [], 1],
  ["groupe13", 13, "group", 540, 340, 20, rose, [], 1],
  ["groupe14", 14, "group", 550, 340, 20, rose, [], 1],
  ["groupe15", 15, "group", 560, 340, 20, rose, [], 1],
  ["groupe16", 16, "group", 570, 340, 20, rose, [], 1],
  ["groupe17", 17, "group", 580, 340, 20, rose, [], 1]
];

var params = {
  directMidiON: true,
  scenesON: false,
  english: true,
  tempoMax: 500,
  tempoMin: 500,
  limiteDureeAttente: 33,
  reactOnPlay: false,
  soundFilesPath1: "hiver2022",
  avecMusicien: false,
  decalageFIFOavecMusicien: 4,
  patternScorePath1: "",

  algoGestionFifo: 0,
  shufflePatterns: false,
  nbeDeGroupesClients: 3,
  simulatorInAseperateGroup: true,
  useRaspberries: true,
  playBufferMessage: 'test',
  raspOSCPort: 4000,
  synchoOnMidiClock: false,
  synchroLink: true,
  synchroSkini: false,
  timer: 500,
  groupesDesSons: groupesDesSons
}

var today = new Date();

function saveParameters(paramFile, params) {

  var paramText = `
// Generated by Skini: `+ today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + `
"use strict"

var midiConfig = require("../serveur/midiConfig.json");

var countBusOUT = 0;
for (var i = 0; i < midiConfig.length; i++) {
  if (midiConfig[i].type === "OUT") {
    if (midiConfig[i].spec === "clipToDAW") {
      exports.busMidiDAW = countBusOUT;
    }
    countBusOUT++;
  }
}

function setnbeDeGroupesClients(num) {
  this.nbeDeGroupesClients = num;
}
exports.setnbeDeGroupesClients = setnbeDeGroupesClients;

// Piece Bitwig en OSC si la paramètre est false
// Sinon Skini parle MIDI
exports.directMidiON = `+ params.directMidiON + `;

// Pour charger les fonctions et modules de scenes de type GOLEM
exports.scenesON = `+ params.scenesON + `;

exports.english = `+ params.english + `;

/***********************************
  Paramètres du simulateur
  Si ces valeurs ne sont pas données c'est celle qui
  sont dans le simulateur qui sont utilisées
************************************/
exports.tempoMax = `+ params.tempoMax + `; // En ms
exports.tempoMin = `+ params.tempoMin + `; // En ms
exports.limiteDureeAttente = `+ params.limiteDureeAttente + `; // En pulsations

/********************************************************
AUTOMATE
*********************************************************/
// Pour un automate conforme à un rechargement selon les déclarations de module HipHop
exports.reactOnPlay = `+ params.reactOnPlay + `;

/*************************************
CHEMIN DES FICHIERS SONS MP3 pour les clients
Le choix se fait sur le client en fonction d'abletonON donc 
de la pièce choisie dans la contrôleur.
Nom du sous répartoire ./sounds/xxxx
*************************************/
exports.soundFilesPath1 = `+ params.soundFilesPath1 + `;

/***************************************
CHEMIN DES PARTITIONS DES PATTERNS ET CONFIG AVEC MUSICIENS
****************************************/
exports.avecMusicien = `+ params.avecMusicien + `; // Pour mettre en place les spécificités au jeu avec des musiciens.
exports.decalageFIFOavecMusicien = `+ params.decalageFIFOavecMusicien + `; // Décalage de la FIFO vide avant le premier pattern dans une FIFO.
exports.patternScorePath1 ="`+ params.patternScorePath1 + `";

/****************************************
ACTIVATION D'ALGORITHME D'ORGANISATION DES FIFOs
Si 0 ou undefined pas d'algorithme.
Si 1 algorithme de réorganisation Début, Milieu, Fin, Neutre (DFMN)
Dans le csv, D -> 1, M -> 2, F->3, N->4 (c'est fixé dans controleAbleton.js)
Si autre ... à créer...
ATTENTION: NE JAMAIS UTILISER EN SITUATION D'INTERACTION SI L'ALGORITHME
PEUT SUPPRIMER DES PATTERNS DES FIFOs
*****************************************/
exports.algoGestionFifo = `+ params.algoGestionFifo + `;
exports.shufflePatterns = `+ params.shufflePatterns + `;
/*****************************************************************************

Gestion de la Matrice des possibles
Automate de gestion de la matrice des possibles

******************************************************************************/
exports.nbeDeGroupesClients = `+ params.nbeDeGroupesClients + `;
exports.simulatorInAseperateGroup = `+ params.simulatorInAseperateGroup + `; // Si true, le dernier groupe client est réservé au simulateur.

// Pour un contrôle des Raspberries
exports.useRaspberries = `+ params.useRaspberries + `;
exports.playBufferMessage = `+ params.playBufferMessage + `;
exports.raspOSCPort = `+ params.raspOSCPort + `;

// La synchro Midi, Link. Synchro Bitwig OSC par défaut si Midi et Link false.
exports.synchoOnMidiClock = `+ params.synchoOnMidiClock + `;
exports.synchroLink = `+ params.synchroLink + `;
exports.synchroSkini = `+ params.synchroSkini + `;
exports.timer = `+ params.timer + `;

const groupesDesSons = [
  `;

  for (var i = 0; i < params.groupesDesSons.length; i++) {
    paramText += `[`;
    for (var j = 0; j < 6; j++) {
      paramText += ` ` + params.groupesDesSons[i][j].toString() + `,`;
    }
    paramText += `"` + params.groupesDesSons[i][6].toString() + `",`;
    paramText += `[` + params.groupesDesSons[i][7].toString() + `],`;
    paramText += params.groupesDesSons[i][8].toString();
    paramText += ` ],
  `;
  }

  paramText += `];
exports.groupesDesSons = groupesDesSons;
`
  fs.writeFile(paramFile, paramText, function (err) {
    if (err) {
      return console.log("ERR: createParam.js: Problem in saving parameters", err);
    }
  });
}
exports.saveParameters = saveParameters;

// Usage
var testParam = JSON.stringify(params);
saveParameters("./param.js", JSON.parse(testParam));
console.log(groupesDesSons[0][6]);
